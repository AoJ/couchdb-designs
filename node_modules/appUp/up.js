#!/usr/bin/env node

var fs = require('fs'),
    http = require('http'),
    spawn = require('child_process').spawn,
    path = require("path"),
    assert = require("assert"),
    zlib = require('zlib');
    var program = require('commander');
    var naught_main = 'node_modules/naught/lib/main.js';

var root = path.join(__dirname);


program
  .command('stop <script> <port>')
  .description('stop application')
  .action(function(script, port, options){
    script = getScript(script);
    port = getPort(port);
    var serviceDir = getServiceDir(script);
    var ipc = serviceDir + port + ":run.ipc";
    naught_exec(["stop", ipc], {}, function(stdout, stderr, code){
    })
  });

program
  .command('status <script> <port>')
  .description('status application')
  .action(function(script, port, options){
    script = getScript(script);
    port = getPort(port);
    var serviceDir = getServiceDir(script);
    var ipc = serviceDir + port + ":run.ipc";
    naught_exec(["status", ipc], {}, function(stdout, stderr, code){
    })
  });

program
  .command('deploy <script> <port>')
  .description('deploy application')
  .action(function(script, port, options){
    script = getScript(script);
    port = getPort(port);
    var serviceDir = getServiceDir(script);
    var ipc = serviceDir + port + ":run.ipc";
    naught_exec(["deploy", ipc], {}, function(stdout, stderr, code){
    })
  });


program
  .command('start <script> <port>')
  .description('stop application')
  .option("-w, --workers [count]", "How many workers to run?")
  .action(function(script, port, options){
    script = getScript(script);
    port = getPort(port);
    var serviceDir = getServiceDir(script);
    naught_exec([
        "start",
        "--worker-count", options.workers || 1,
        "--ipc-file", serviceDir + port + ":run.ipc",
        "--log", serviceDir + port + ":info.log",
        "--stderr", serviceDir + port + ":stderr.log",
        "--stdout", serviceDir + port + ":stdout.log",
        "--max-log-size", "1000000",
        "--cwd", root,
        script
    ], {PORT: port}, function() {

    })
  });

  program.parse(process.argv);


function getScript(script) {
  return script || 'server.js';
}


function getPort(port) {
  return port || 3000;
}


function getServiceDir(script) {
  return "/var/node.js/_run/" + (root + "/" + script).replace(/[\/\.]/ig, "_") + "/";
}


function exec(cmd, args, opts, cb) {
    var bin, stdout, stderr;
    if (args == null) args = []
    if (opts == null) opts = {}
    if (cb == null) cb = function() {};
    bin = spawn(cmd, args, opts);
    stdout = ""
    bin.stdout.setEncoding('utf8')
    bin.stdout.on('data', function(data) {
        if(data) process.stdout.write(data);
        stdout += data;
    });
    stderr = ""
    bin.stderr.setEncoding('utf8')
    bin.stderr.on('data', function(data) {
        if(data) process.stderr.write(data);
        stderr += data;
    });
    bin.on('close', function(code, signal) {
        cb(stdout, stderr, code, signal);
        process.removeListener('SIGINT', handleSigInt);
    });

    function handleSigInt() {
      bin.stdin.write("\x03"); //send SIGINT
    }
    process.once('SIGINT', handleSigInt);
}

function import$(obj, src) {
    var key, own = {}.hasOwnProperty;
    for (key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
}

function naught_exec(args, env, cb) {
    if (env == null) env = {}
    import$(import$({}, process.env), env)
    exec(process.execPath, [naught_main].concat(args), {
        cwd: __dirname,
        env: env
    }, function(stdout, stderr, code, signal) {
        cb(stdout, stderr, code);
    });
}