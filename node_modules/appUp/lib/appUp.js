var http = require('http');
var util = require('util');

/* use
app.configure(function(){
  appUp.configure(this);
});

app.listen();

*/


var states = {
    request: 0,     //http, may be multiple requests per connection in the case of keep-alive connections
    connection: 0   //stream
}

var favicon = new Buffer("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAFSUlEQVR42s3Xh1OTdxzHcezZ807Lq\
    WBoEZQavYIDg9CYQIAQIgHEUaoULFY9tdWrs7UFHAgiw8FGJaAMkQjKciEoMhRFcbTU2qV2/Cef/sbzJE/yo+r1jmu5ex1PILy/\
    X56Me+Lm5ub2FjGBcCc8CRXhNUZU0gx3aSadzQ6mPfkrFf/W4z8/tXv0h8PD32UpePgyBcMv6fc1DJ0pzWbbqEcLKmOOYIoYfME\
    NSx68SHF4noL71G8OQwSdKc128yA0rsHh0YLPxeCQ7Ndk5t4vDnepn6lPMPiTMzpTms1OhdYpKMWUwbuvCQ4+c3bnWRL3YxJuy5\
    4mYUBCZ0qz2ZND/6qgPaYMPnUODvywGv2yEa5vxHHcP7IKfd9zvQSdKc3mCzjFlMGR0YKrhGDvdw63nlAf2/U8ljxyEBaQY68L2\
    mMuQermw0S7G0rDieimHnxkJyzgGlTG3iTYRd3nrg9xnfdW4MpgAi7fXor2gTi09cWipZcTFlAGu1yCm3fNZ64PreTucZ0urt0l\
    A+8koK0/Hi23LLjQY8G29EBsSwtE800LdyMGTYSwwD8F88v1cHd3Z/Iq9Lg6SIco3F6OS/0JZGAcj3fH4DzVRS1BkPZdxnZ9CdP\
    YyQkLyDEnA8uxMvkD6MLmMPT40sAyMpDr6FuK5m4LC56TXTMzDVe5YN105uwVM3c5mhEW4EGHdqo3Af5z38Pn2w3YstOEmX5eaL\
    +VgNaeeNg6Y8gZ0cFz2juYOHEiJk2axI4Pl+lQdykadR1ciN6X8EFtuwk1sjaTuEBbD3nsSLytZykZwJ2oN8LLywu5ZWGouRgLl\
    UqFtJxg1HaYWNB/noqcmdkoq1rPTJ48GaFGX5xujeJaoqQFfFF9Mcqu6oJRXOBidzyYLu4CkbwhAN7e3li7KRDrtgTCb5Y3wk1+\
    qCbh9MMhbGBGTjTqO5YxesMcTJkyBdZmI9dkJKffl/BBZVMkTp2X2CLFBZo640CdvxZr5z9vOtRqH4Qb/WEwBmDufD94enqipNa\
    AvXlh8PDwwI6MIBY8SaxeG8B+drIxAieocxGYv3A6QnQzUEGOKxoiUE6dDRcXaLxCnkzUZa68JpwNS16rQ2v3ViYrP5E9DJt2LE\
    BFfSz7fXS8mgWpBRofBAWTh6Q+nMku0rL7GM0BKK0zsMVlwgINHTE4K6lujkLKBn/236Rnx9iD5XXxLGiImkVuRyItM5Hd5321C\
    rNme2HGTG8UVa7BF7sD2ct26tSp7P5ZR1ag8HQYCqu544SwQF2rGbUtJnKawlFcY0BOUSwKSlNhtS1D0RkDEYbiMxEoq96IgwXL\
    WdBqW4nM3CR8tjGSOdf6JUprzdiTacC6TSas3xyN6oatKKu14EilnjvFCQtYbUb7dserQskfmclptuAYOT5mDcVRqjIUJWfMjiA\
    J0bNSZUuCtTGJ3Dag4KQexact7La1cTWOnopkL1dZbjknLKDcjkaU8k9QOma0GFO2mLwHKJQuRg5V4nCoRItDxVpkE8ICrwyWik\
    EWUwTpE06WRRVSH+LgcWeZxzhhATnmGsx6w+CBo7IQZv8RhYIQ7GOCsS+fExYYPRgiBgvE4F5ZXjAyZLlceu4i8qbFpclyFokLC\
    ME8MchirsEch28PUUF232Rze7KUNPj6oMZpAXZR+rqgHHMOauxBJlODr5QOaLD7wELs3s/tku1b6HRRyi7Lldu9SXCXS3AntVcW\
    iB1UhsP2dGfKy3J36UOCgUgkUon1YyRVmmFQfjCZIJ0KtbSVVnp8xoJWmqFWfjT7zz+c0q9x0o3xxNtjbLw0a5zb/+Hrb8ZlHLG\
    5bxtmAAAAAElFTkSuQmCC", 'base64');

var gracefullyExiting = false;
exports.gracefullyExiting = function(req, res, next) {

    if (!gracefullyExiting) {
        return next();
    }
    next();
    //for nginx proxy fallback
    //res.setHeader("Connection", "close");
    //return res.send(502, "Server is in the process of restarting.");
}



exports.configure = function(app) {
    app.set('ip', process.env.IP || undefined);
    app.set('port', process.env.PORT || process.argv[2] || 3000);
    app.set('gracefullyExiting', false);

    app.listen = listen;
    app.use(exports.gracefullyExiting);


    app.get('/__health', function(req, res, next) {
        //if(req.query.auth != 'xdds') return next();

        res.send({
            pid: process.pid,
            memory: process.memoryUsage(),
            uptime: process.uptime(),
            states: states
        })
    })

    app.get('/favicon.ico', function(req, res){
        res.writeHead(200, {'Content-Type': 'image/x-icon', 'Content-Length': favicon.length });
        res.end(favicon);
    });
};


var listen = function() {
        var app = this;
        var server = http.createServer(app);
        var customCb;

        /* port, ip, cb */
        if(arguments.length === 3) {
            app.set('port', arguments[0]);
            app.set('ip', arguments[1]);
            customCb = arguments[2];
        }

        /* port, ip|cb */
        if(arguments.length === 2) {
            app.set('port', arguments[0]);
            if(typeof arguments[1] === "function" ) customCb = arguments[1];
            else app.set('ip', arguments[1]);
        }

        /* port|cb */
        if(arguments.length === 1) {
            if(typeof arguments[0] === "function" ) customCb = arguments[1];
            else app.set('port', arguments[0]);
        }

        var listenCb = function() {
            util.log(process.pid + " " + util.format('server listen on %s:%s', app.get('ip') || '', app.get('port')));

            /*
              SIGTERM  termination request, sent to the program
              SIGSEGV  invalid memory access (segmentation fault)
              SIGINT   external interrupt, usually initiated by the user, ctrl + c
              SIGILL   invalid program image, such as invalid instruction
              SIGABRT  abnormal termination condition, as is e.g. initiated by abort()
              SIGFPE   erroneous arithmetic operation such as divide by zero
            */
            process.on('SIGTERM', function(e) {
                safeExiting('SIGTERM', server);
            });

            process.on('SIGINT', function(e) {
                safeExiting('SIGINT', server);
            });

            process.on('shutdown', function(e){
                safeExiting('shutdown', server);
            })


            if (process.send) process.send("online");
            if(customCb) customCb();
        };

        server.on('request', function(req, res){
            if(req.originalUrl !== '/__health') { 
                states.request++;
            }
        });

        server.on('connection', function(socket){
            states.connection++;
        });

        server.on('close', function(){
            process.exit(0);
        })

        //close msg
        process.on('message', function(msg){
            if(msg === "shutdown") {
                safeExiting('shutdown msg', server);
            }
        })

        var args = [app.get('port'), app.get('ip'), listenCb];

        return server.listen.apply(server, args);
    };


function safeExiting(EV, app) {
    if(gracefullyExiting) return;
    gracefullyExiting = true;
    util.log(process.pid + " Received kill signal (" + EV + "), shutting down");
    setTimeout(function() {
        util.error(process.pid + " Could not close connections in time, forcefully shutting down");
        return process.exit(1);
    }, 10 * 1000);

    try {
        if(app) app.close();
    } catch(e) {
        if(e.message === "Not running") return;
        throw e;
    }
}

process.on('uncaughtException', function(err) {
  util.error(process.pid + " " + err.stack);
});